from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.core.redis import redis_session
from app.filters.generation_process_filter import GenFilter
from app.keyboards.menu import get_menu_kb
from app.services.one_time_code_repository import model_repository

router = Router()
router.callback_query.filter(GenFilter())
router.message.filter(GenFilter())


@router.message(Command("start"))
async def start_cmd(message: Message):
    if not await model_repository.check_pattern(message.from_user.id, redis_session):
        await model_repository.set(message.from_user.id, "animagineXL_Euler", redis_session)
    await message.answer(f"üëã–ü—Ä–∏–≤–µ—Ç, {message.from_user.username} \n"
                         f"üìã–ú–µ–Ω—é –±–æ—Ç–∞: /menu\n"
                         f"üì¢–î–ª—è —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω API KEY‚ùó")


@router.message(Command("menu"), )
async def menu(message: Message):
    if not await model_repository.check_pattern(message.from_user.id, redis_session):
        await model_repository.set(message.from_user.id, "animagineXL_Euler", redis_session)
    model, sampler = (await model_repository.get_code(message.from_user.id, redis_session)).split("_")
    await message.answer(
        text=f"–ú–µ–Ω—é –±–æ—Ç–∞\n"
             f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {model}\n"
             f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–º–ø–ª–µ—Ä: {sampler}\n",
        reply_markup=get_menu_kb()
    )


@router.message(Command("help"))
async def about(message: Message):
    await message.answer("1) –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: \n"
                         " - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API KEY –≤ /menu - API KEY\n"
                         " - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API KEY –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @VisionCraft_bot –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è\n"
                         "2) –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /menu - –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                         )


@router.message(Command("about"))
async def about(message: Message):
    await message.answer("–ë–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Stable Diffusion XL \n"
                         "by @laaemi")
